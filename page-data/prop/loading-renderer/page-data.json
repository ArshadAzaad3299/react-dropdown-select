{"componentChunkName":"component---src-templates-page-template-js","path":"/prop/loading-renderer","webpackCompilationHash":"bc19c34c6a8b9b27ed98","result":{"data":{"page":{"html":"<p>Override default loading indicator</p>\n<h3>Usage</h3>\n<pre><code>loadingRenderer={\n  ({ props }) => &#x3C;component/>\n}\n</code></pre>","frontmatter":{"date":"November 07, 2017","path":"/prop/loading-renderer","title":"loadingRenderer","demo":"6jzprr157k","innerProps":true,"innerState":false,"innerMethods":false}},"methodsPage":{"html":"<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Arguments</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>removeItem(event, item, false)</td>\n<td><strong>event</strong>: eventEmitter | null <br/><strong>item</strong>: object<br/> <strong>closeModal</strong>: boolean</td>\n<td>undefined</td>\n<td><code>event</code> used to stop propagation</td>\n</tr>\n<tr>\n<td>dropDown('toggle')</td>\n<td><strong>string</strong>: open|close|toggle</td>\n<td>undefined</td>\n<td>one of <em>open</em>, <em>close</em> or <em>toggle</em></td>\n</tr>\n<tr>\n<td>addItem(item)</td>\n<td><strong>item</strong>: object</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>setSearch(event)</td>\n<td><strong>event</strong>: eventEmitter</td>\n<td>undefined</td>\n<td>expects to get <code>event</code> with <code>{ target: { value } }</code></td>\n</tr>\n<tr>\n<td>getInputSize()</td>\n<td>-</td>\n<td>number</td>\n<td>input character count</td>\n</tr>\n<tr>\n<td>toggleSelectAll()</td>\n<td>-</td>\n<td>undefined</td>\n<td></td>\n</tr>\n<tr>\n<td>clearAll()</td>\n<td>-</td>\n<td>undefined</td>\n<td></td>\n</tr>\n<tr>\n<td>selectAll([])</td>\n<td>-</td>\n<td>undefined</td>\n<td>will select all values except disabled or a list of values provided as first parameter</td>\n</tr>\n<tr>\n<td>isSelected(item)</td>\n<td><strong>item</strong>: object</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>searchResults()</td>\n<td>-</td>\n<td>array</td>\n<td>returns array of items matching <code>/item.label/i</code> regex, if <code>searchBy</code> prop is used - matches against it's value</td>\n</tr>\n<tr>\n<td>selectRef()</td>\n<td>-</td>\n<td>DOM node</td>\n<td>returns DOM element of &#x3C;Select/></td>\n</tr>\n<tr>\n<td>getSelectBounds()</td>\n<td>-</td>\n<td>object</td>\n<td>returns <code>getBoundingClientRect()</code> of &#x3C;Select/></td>\n</tr>\n<tr>\n<td>areAllSelected()</td>\n<td>-</td>\n<td>boolean</td>\n<td>returns true/false if all values (except disabled) selected</td>\n</tr>\n<tr>\n<td>sortBy()</td>\n<td>-</td>\n<td>array</td>\n<td>returns sorted array of values (sort field defined by <code>sortBy</code> prop)</td>\n</tr>\n<tr>\n<td>safeString()</td>\n<td><strong>string</strong>: string</td>\n<td>string</td>\n<td>returns cleaned up (safe) string</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"date":"November 07, 2017","path":"/methods","title":"methods"}},"propsPage":{"html":"<h2>Component props</h2>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>values</td>\n<td>array</td>\n<td>[]</td>\n<td>Selected values</td>\n</tr>\n<tr>\n<td>options</td>\n<td>array</td>\n<td>[]</td>\n<td>Available options, (option with key <code>disabled: true</code> will be disabled)</td>\n</tr>\n<tr>\n<td>keepOpen</td>\n<td>bool</td>\n<td>false</td>\n<td>If true, dropdown will always stay open (good for debugging)</td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>bool</td>\n<td>false</td>\n<td>If true, and <code>searchable</code>, dropdown will auto focus</td>\n</tr>\n<tr>\n<td>clearOnBlur</td>\n<td>bool</td>\n<td>true</td>\n<td>If true, and <code>searchable</code>, search value will be cleared on blur</td>\n</tr>\n<tr>\n<td>clearOnSelect</td>\n<td>bool</td>\n<td>true</td>\n<td>If true, and <code>searchable</code>, search value will be cleared upon value select/de-select</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>null</td>\n<td>If set, input type hidden would be added in the component with the value of the <code>name</code> prop as name and select's <code>values</code> as value</td>\n</tr>\n<tr>\n<td>dropdownGap</td>\n<td>number</td>\n<td>5</td>\n<td>Gap between select element and dropdown</td>\n</tr>\n<tr>\n<td>multi</td>\n<td>bool</td>\n<td>false</td>\n<td>If true - will act as multi-select, if false - only one option will be selected at the time</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>string</td>\n<td>\"Select...\"</td>\n<td>Placeholder shown where there are no selected values</td>\n</tr>\n<tr>\n<td>addPlaceholder</td>\n<td>string</td>\n<td>\"\"</td>\n<td>Secondary placeholder on search field if any value selected</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>bool</td>\n<td>false</td>\n<td>Disable select and all interactions</td>\n</tr>\n<tr>\n<td>style</td>\n<td>object</td>\n<td>{}</td>\n<td>Style object to pass to select</td>\n</tr>\n<tr>\n<td>className</td>\n<td>string</td>\n<td></td>\n<td>CSS class attribute to pass to select</td>\n</tr>\n<tr>\n<td>loading</td>\n<td>bool</td>\n<td>false</td>\n<td>Loading indicator</td>\n</tr>\n<tr>\n<td>clearable</td>\n<td>bool</td>\n<td>false</td>\n<td>Clear all indicator</td>\n</tr>\n<tr>\n<td>searchable</td>\n<td>bool</td>\n<td>true</td>\n<td>If true, select will have search input text</td>\n</tr>\n<tr>\n<td>separator</td>\n<td>bool</td>\n<td>false</td>\n<td>Separator line between close all and dropdown handle</td>\n</tr>\n<tr>\n<td>dropdownHandle</td>\n<td>bool</td>\n<td>true</td>\n<td>Dropdown handle to open/close dropdown</td>\n</tr>\n<tr>\n<td>dropdownHeight</td>\n<td>string</td>\n<td>\"300px\"</td>\n<td>Minimum height of a dropdown</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/examples/#Right-to-left\">direction</a></td>\n<td>string</td>\n<td>\"ltr\"</td>\n<td>direction of a dropdown \"ltr\", \"rtl\" or \"auto\"</td>\n</tr>\n<tr>\n<td>searchBy</td>\n<td>string</td>\n<td>label</td>\n<td>Search by object property (or nested property with dot notation) in values</td>\n</tr>\n<tr>\n<td>sortBy</td>\n<td>string</td>\n<td>null</td>\n<td>Sort by object property (or nested property with dot notation) in values</td>\n</tr>\n<tr>\n<td>labelField</td>\n<td>string</td>\n<td>\"label\"</td>\n<td>Field (or nested property with dot notation) in data to use for label</td>\n</tr>\n<tr>\n<td>valueField</td>\n<td>string</td>\n<td>\"value\"</td>\n<td>Field (or nested property with dot notation) in data to use for value</td>\n</tr>\n<tr>\n<td>color</td>\n<td>string</td>\n<td>\"#0074D9\"</td>\n<td>Base color to use in component, also can be overwritten via CSS</td>\n</tr>\n<tr>\n<td>closeOnScroll</td>\n<td>bool</td>\n<td>false</td>\n<td>If true, scrolling the page will close the dropdown</td>\n</tr>\n<tr>\n<td>closeOnSelect</td>\n<td>bool</td>\n<td>false</td>\n<td>If true, selecting option will close the dropdown</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/dropdown-position\">dropdownPosition</a></td>\n<td>string</td>\n<td>\"bottom\"</td>\n<td>Available options are \"auto\", \"top\" and \"bottom\" defaults to \"bottom\". Auto will adjust itself according Select's position on the page</td>\n</tr>\n<tr>\n<td>keepSelectedInList</td>\n<td>bool</td>\n<td>true</td>\n<td>If false, selected item will not appear in a list</td>\n</tr>\n<tr>\n<td>portal</td>\n<td>DOM element</td>\n<td>false</td>\n<td>If valid dom element specified - dropdown will break out to render inside the specified element</td>\n</tr>\n<tr>\n<td>create</td>\n<td>bool</td>\n<td>false</td>\n<td>If true, select will create value from search string and fire <code>onCreateNew</code> callback prop</td>\n</tr>\n<tr>\n<td>createNewLabel</td>\n<td>string</td>\n<td>\"add {search}\"</td>\n<td>If create set to true, this will be the label of the \"add new\" component. <code>{search}</code> will be replaced by search value</td>\n</tr>\n<tr>\n<td>disabledLabel</td>\n<td>string</td>\n<td>\"disabled\"</td>\n<td>Label shown on disabled field (after) the text</td>\n</tr>\n<tr>\n<td>additionalProps</td>\n<td>object</td>\n<td>null</td>\n<td>Additional props to pass to Select</td>\n</tr>\n</tbody>\n</table>\n<h2>Callback props</h2>\n<blockquote>\n<p>by using renderer props to override components some of the functionality will have to be handled manually with a help of internal props, states and methods exposed</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onChange</td>\n<td>func</td>\n<td></td>\n<td>On values change callback, returns array of values objects</td>\n</tr>\n<tr>\n<td>onDropdownClose</td>\n<td>func</td>\n<td></td>\n<td>Fires upon dropdown close</td>\n</tr>\n<tr>\n<td>onDropdownOpen</td>\n<td>func</td>\n<td></td>\n<td>Fires upon dropdown open</td>\n</tr>\n<tr>\n<td>onCreateNew</td>\n<td>func</td>\n<td></td>\n<td>Fires upon creation of new item if <code>create</code> prop set to <code>true</code></td>\n</tr>\n<tr>\n<td>onClearAll</td>\n<td>func</td>\n<td></td>\n<td>Fires upon clearing all values (via custom renderers)</td>\n</tr>\n<tr>\n<td>onSelectAll</td>\n<td>func</td>\n<td></td>\n<td>Fires upon selecting all values (via custom renderers)</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/content-renderer\">contentRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal content component (the contents of the select component)</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/item-renderer\">itemRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal item in a dropdown</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/no-data-renderer\">noDataRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal \"no data\" (shown where search has no results)</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/option-renderer\">optionRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal option (the pillow with an \"x\") on the select content</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/input-renderer\">inputRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal input text</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/loading-renderer\">loadingRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal loading</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/clear-renderer\">clearRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal clear button</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/separator-renderer\">separatorRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal separator</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/dropdown-renderer\">dropdownRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal dropdown component</td>\n</tr>\n<tr>\n<td><a href=\"https://sanusart.github.io/react-dropdown-select/prop/dropdown-handle-renderer\">dropdownHandleRenderer</a></td>\n<td>func</td>\n<td></td>\n<td>Overrides internal dropdown handle</td>\n</tr>\n<tr>\n<td>searchFn</td>\n<td>func</td>\n<td>undefined</td>\n<td>Overrides internal search function</td>\n</tr>\n<tr>\n<td>handleKeyDownFn</td>\n<td>func</td>\n<td>undefined</td>\n<td>Overrides internal keyDown function</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"date":"November 07, 2017","path":"/api","title":"API"}},"statePage":{"html":"<p>Access to current state of &#x3C;Select/> component</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Return</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dropdown</td>\n<td>boolean</td>\n<td>check if dropdown is open</td>\n</tr>\n<tr>\n<td>values</td>\n<td>array</td>\n<td>selected value(s)</td>\n</tr>\n<tr>\n<td>search</td>\n<td>string</td>\n<td>current search string</td>\n</tr>\n<tr>\n<td>selectBounds</td>\n<td>object</td>\n<td>current <code>getBoundingClientRect()</code> of &#x3C;Select/></td>\n</tr>\n</tbody>\n</table>","frontmatter":{"date":"November 07, 2017","path":"/state","title":"State"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"all":{"path":"/prop/loading-renderer","demo":"6jzprr157k","innerState":false,"innerProps":true,"innerMethods":false}}}}